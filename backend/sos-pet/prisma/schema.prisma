// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql" // Mantenemos el proveedor para PostgreSQL
  url      = env("DATABASE_URL")
}

// Modelo para los roles de usuario
model Role {
  id    Int    @id @default(autoincrement())
  name  String @unique // "ADMIN", "USER", etc.
  users User[]
}

// Modelo para la autenticación de usuarios
model User {
  id         Int      @id @default(autoincrement())
  email      String   @unique
  password   String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  roleId     Int
  role       Role     @relation(fields: [roleId], references: [id])
  person     Person?
}

// Modelo para la información personal, ahora vinculado a un Usuario
model Person {
  id         Int      @id @default(autoincrement())
  firstname  String
  middlename String?
  lastname   String
  phone      String?
  register   DateTime @default(now())
  active     Boolean  @default(true)
  userId     Int      @unique
  user       User     @relation(fields: [userId], references: [id])
  shelters   ShelterPerson[]
}

model Pet {
  id       Int      @id @default(autoincrement())
  name     String
  idkind   Int?
  register DateTime? @default(now())
  kind     Petkind? @relation(fields: [idkind], references: [idkind])
}

model Petkind {
  idkind Int    @id @unique
  kind   String
  pets   Pet[]
}

model Shelter {
  id          Int      @id @default(autoincrement())
  sheltername String
  address     String?
  phone       String?
  zip         String?
  register    DateTime? @default(now())
  people      ShelterPerson[]
}

model ShelterPerson {
  shelterId Int
  personId  Int
  shelter   Shelter @relation(fields: [shelterId], references: [id])
  person    Person  @relation(fields: [personId], references: [id])

  @@id([shelterId, personId])
  @@map("shelter_people")
}